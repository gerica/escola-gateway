app:
  description: Sistema de Gestão Escolar

server:
  port: ${CLIENT_SERVICE_PORT:8080} # Uma nova porta para este serviço

spring:
  application:
    name: ${SPRING_APPLICATION_NAME}
  main:
    web-application-type: reactive
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
      routes:
        - id: auth-service-route
          uri: lb://AUTH-SERVICE
          predicates:
            - Path=/auth/**
          filters:
            # Remove o prefixo /auth antes de encaminhar a requisição para o microserviço.
            # Ex: /auth/graphql -> /graphql
            - RewritePath=/auth/(?<segment>.*), /$\{segment}
        - id: client-service-route
          uri: lb://CLIENT-SERVICE
          predicates:
            - Path=/clients/**
          filters:
            - RewritePath=/clients/(?<segment>.*), /$\{segment}
        - id: util-service-route
          uri: lb://UTIL-SERVICE
          predicates:
            - Path=/utils/**
          filters:
            - RewritePath=/utils/(?<segment>.*), /$\{segment}
        - id: admin-service-route
          uri: lb://ADMIN-SERVICE
          predicates:
            - Path=/admin/**
          filters:
            - RewritePath=/admin/(?<segment>.*), /$\{segment}

# Configuração do cliente Eureka. O Gateway precisa saber onde o servidor Eureka está.
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://localhost:8761/eureka}
    lease-renewal-interval-in-seconds: 5
    lease-expiration-duration-in-seconds: 15
    registry-fetch-interval-seconds: 10
  instance:
    hostname: gateway
    prefer-ip-address: true

management:
  endpoints:
    web:
      exposure:
        include: gateway,health,info,mappings

logging:
  level:
    org.springframework.cloud.gateway: INFO
    org.springframework.security: INFO
    reactor.netty.http.client: INFO