plugins {
    id 'java'
    // ðŸ‘‡ MUDANÃ‡A: Usando a versÃ£o estÃ¡vel mais recente do Spring Boot
    id 'org.springframework.boot' version '3.3.1'
    // ðŸ‘‡ MUDANÃ‡A: Usando a versÃ£o do plugin compatÃ­vel com o Boot 3.3.1
    id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.escola.gateway'
version = '0.0.1-SNAPSHOT'

// ðŸ‘‡ MUDANÃ‡A: RepositÃ³rio snapshot nÃ£o Ã© mais necessÃ¡rio com versÃµes estÃ¡veis
repositories {
    mavenCentral()
}

ext {
    // ðŸ‘‡ MUDANÃ‡A: Usando a versÃ£o estÃ¡vel correspondente do Spring Cloud (Jubilee)
    set('springCloudVersion', "2023.0.2")
    mapstructVersion = "1.5.5.Final"
}

springBoot {
    buildInfo()
}

dependencies {
    // --- DependÃªncias do Gateway e Cloud ---
    // ðŸ‘‡ MUDANÃ‡A: Esta Ã© a dependÃªncia correta e estÃ¡vel para o Gateway
    implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'
     implementation 'org.springframework.boot:spring-boot-starter-graphql'

    // GraphQL
    implementation 'com.graphql-java:graphql-java-extended-scalars:22.0'

    // --- Ferramentas de Desenvolvimento ---
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    // --- Testes ---
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // ðŸ‘‡ REMOVIDO: NÃ£o Ã© mais necessÃ¡rio
    // testImplementation 'org.springframework.graphql:spring-graphql-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

bootRun {
    // Verifica se a propriedade 'debug' foi passada na linha de comando (ex: ./gradlew bootRun -Pdebug)
    if (project.hasProperty('debug')) {
        jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005']
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

// --- Tasks para Gerenciamento do Docker Compose ---

/**
 * Para e remove os contÃªineres, redes e volumes definidos no docker-compose.yml.
 * Equivalente a: docker compose down
 */
tasks.register('dockerComposeDown', Exec) {
    group = 'Docker'
    description = 'Para e remove os contÃªineres do Docker Compose.'
    commandLine 'docker', 'compose', 'down'
}

/**
 * Executa 'docker compose down' e depois 'docker compose up -d --build'.
 * Ã‰ a task principal para reiniciar todo o ambiente.
 */
tasks.register('dockerComposeRestart', Exec) {
    group = 'Docker'
    description = 'Reinicia o ambiente Docker Compose, forÃ§ando a reconstruÃ§Ã£o das imagens.'

    // Garante que a task 'dockerComposeDown' seja executada sempre antes desta.
    // A referÃªncia pelo nome da task funciona perfeitamente com o registro lazy.
    dependsOn 'dockerComposeDown'

    // Define o comando a ser executado.
    commandLine 'docker', 'compose', 'up', '-d', '--build'

    // Garante que a task sempre execute, ignorando o cache "UP-TO-DATE" do Gradle.
    outputs.upToDateWhen { false }
}

tasks.register('dockerComposeReload', Exec) {
    group = 'Docker'
    description = 'Reinicia um serviÃ§o especÃ­fico ou todos os serviÃ§os. Ex: ./gradlew dockerComposeReload -Pservice=auth-service'

    outputs.upToDateWhen { false }

    doFirst {
        def command = ['docker', 'compose', 'restart']
        // Se a propriedade 'service' foi fornecida, adicione-a ao comando
        if (project.hasProperty('service')) {
            command.add(project.property('service'))
        }
        // Define a linha de comando final
        commandLine command
    }
}